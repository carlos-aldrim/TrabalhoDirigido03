{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as type from \"../types/task\";\nvar apiUrl = \"http://localhost:3333\";\nexport var getTasks = function getTasks() {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      dispatch({\n        type: type.GET_TASKS_REQUEST\n      });\n      try {\n        var response = yield fetch(apiUrl + \"/tasks\", {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n          }\n        });\n        console.log(response);\n        var result = yield response.json();\n        console.log(result);\n        dispatch({\n          type: type.GET_TASKS_SUCCESS,\n          payload: _toConsumableArray(result)\n        });\n      } catch (error) {\n        dispatch({\n          type: type.GET_TASKS_FAILED,\n          payload: error\n        });\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var updatePost = function updatePost(formUpdate) {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch) {\n      dispatch({\n        type: type.UPDATE_POST_REQUEST\n      });\n      try {\n        var response = yield fetch(apiUrl + \"/\" + formUpdate.id, {\n          method: \"PUT\",\n          headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"content-type\": \"application/json; charset=utf-8\"\n          },\n          body: JSON.stringify(myFunction.removeId(formUpdate))\n        });\n        var result = yield response.json();\n        dispatch({\n          type: type.UPDATE_TASK_SUCCESS,\n          payload: result\n        });\n      } catch (error) {\n        dispatch({\n          type: type.UPDATE_TASK_FAILED,\n          payload: error\n        });\n      }\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["type","apiUrl","getTasks","_ref","_asyncToGenerator","dispatch","GET_TASKS_REQUEST","response","fetch","method","headers","Accept","console","log","result","json","GET_TASKS_SUCCESS","payload","_toConsumableArray","error","GET_TASKS_FAILED","_x","apply","arguments","updatePost","formUpdate","_ref2","UPDATE_POST_REQUEST","id","body","JSON","stringify","myFunction","removeId","UPDATE_TASK_SUCCESS","UPDATE_TASK_FAILED","_x2"],"sources":["C:/Mobile/TrabalhoDirigido03/Frontend/src/redux/actions/taskAction.js"],"sourcesContent":["import * as type from \"../types/task\";\r\n\r\nconst apiUrl = \"http://localhost:3333\";\r\n\r\nexport const getTasks = () => async (dispatch) => {\r\n  dispatch({\r\n    type: type.GET_TASKS_REQUEST,\r\n  });\r\n\r\n  try {\r\n    const response = await fetch(apiUrl + \"/tasks\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n      },\r\n    });\r\n    console.log(response);\r\n    const result = await response.json();\r\n    console.log(result);\r\n\r\n    dispatch({\r\n      type: type.GET_TASKS_SUCCESS,\r\n      payload: [...result],\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: type.GET_TASKS_FAILED,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updatePost = (formUpdate) => async (dispatch) => {\r\n  dispatch({\r\n    type: type.UPDATE_POST_REQUEST,\r\n  });\r\n  try {\r\n    const response = await fetch(apiUrl + \"/\" + formUpdate.id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"content-type\": \"application/json; charset=utf-8\",\r\n      },\r\n      body: JSON.stringify(myFunction.removeId(formUpdate)),\r\n    });\r\n    const result = await response.json();\r\n\r\n    dispatch({\r\n      type: type.UPDATE_TASK_SUCCESS,\r\n      payload: result,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: type.UPDATE_TASK_FAILED,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n"],"mappings":";;AAAA,OAAO,KAAKA,IAAI;AAEhB,IAAMC,MAAM,GAAG,uBAAuB;AAEtC,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA;EAAA;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAS,WAAOC,QAAQ,EAAK;MAChDA,QAAQ,CAAC;QACPL,IAAI,EAAEA,IAAI,CAACM;MACb,CAAC,CAAC;MAEF,IAAI;QACF,IAAMC,QAAQ,SAASC,KAAK,CAACP,MAAM,GAAG,QAAQ,EAAE;UAC9CQ,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,MAAM,EAAE,mCAAmC;YAC3C,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;QACrB,IAAMO,MAAM,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACpCH,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;QAEnBT,QAAQ,CAAC;UACPL,IAAI,EAAEA,IAAI,CAACgB,iBAAiB;UAC5BC,OAAO,EAAAC,kBAAA,CAAMJ,MAAM;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdd,QAAQ,CAAC;UACPL,IAAI,EAAEA,IAAI,CAACoB,gBAAgB;UAC3BH,OAAO,EAAEE;QACX,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,iBAAAE,EAAA;MAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;IAAA;EAAA;AAAA;AAED,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,UAAU;EAAA;IAAA,IAAAC,KAAA,GAAAtB,iBAAA,CAAK,WAAOC,QAAQ,EAAK;MAC5DA,QAAQ,CAAC;QACPL,IAAI,EAAEA,IAAI,CAAC2B;MACb,CAAC,CAAC;MACF,IAAI;QACF,IAAMpB,QAAQ,SAASC,KAAK,CAACP,MAAM,GAAG,GAAG,GAAGwB,UAAU,CAACG,EAAE,EAAE;UACzDnB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,MAAM,EAAE,mCAAmC;YAC3C,cAAc,EAAE;UAClB,CAAC;UACDkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,UAAU,CAACC,QAAQ,CAACR,UAAU,CAAC;QACtD,CAAC,CAAC;QACF,IAAMX,MAAM,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAEpCV,QAAQ,CAAC;UACPL,IAAI,EAAEA,IAAI,CAACkC,mBAAmB;UAC9BjB,OAAO,EAAEH;QACX,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdd,QAAQ,CAAC;UACPL,IAAI,EAAEA,IAAI,CAACmC,kBAAkB;UAC7BlB,OAAO,EAAEE;QACX,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,iBAAAiB,GAAA;MAAA,OAAAV,KAAA,CAAAJ,KAAA,OAAAC,SAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}